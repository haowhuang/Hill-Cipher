import numpy
import math
from array import *
from bidict import bidict
#https://codinglab.huostravelblog.com/math/modular-inverse-table-generator/index.php?modulo=27
# space counts as 32?
hash = bidict({'a': 0, 'b' : 1, 'c': 2, 'd':3, 'e' :4, 'f' : 5, 'g' :6, 'h':7, 'i':8 , 'j':9, 'k':10 ,'l':11, 'm':12 , 'n':13 , 'o':14 , 'p':15 , 'q':16, 'r':17, 's':18, 't':19, 'u':20, 'v':21, 'w':22, 'x':23, 'y' : 24,'z':25, ' ': 26})

ModInv = bidict({1:1, 2:14, 4:7, 5:11, 7:4, 8:17, 10:19, 11:5, 13:25, 14:2, 16:22, 17:8, 19:10, 20:23, 22:16, 23:20, 25:13, 26:26})


def textToNum(string):
  Num = [] 
  for i in text: 
    #if(i != ' ') :
    Num.append(hash[i])
  return Num 

def numToText(num):
  str = ""
  for i in num:
    for j in i: 
      str = str + hash.inverse[int(j) % 27]
  return str

def splitByThree(numlist):
  Matrix = [] 
  for i in range(0, len(numlist)-2, 3):
    section = [numlist[i], numlist[i+1], numlist[i+2]]
    Matrix.append(section)
  return numpy.array(Matrix)

def splitByTwo(numlist):
  Matrix = [] 
  for i in range(0, len(numlist)-1, 2):
    section = [numlist[i], numlist[i+1]]
    Matrix.append(section)
  return numpy.array(Matrix)
  
def askEncodingMatrix():
  n = int(input('what is the dimension of the nxn matrix?: '))
  encodingmatrix=numpy.zeros((n,n))
  print("Enter in the values for the KeyMatrix row by row")
  for i in range(n):
    for g in range(n):
      encodingmatrix[i][g]=int(input())
  return encodingmatrix
  
def decodeMatrix(EncryptedMatrix, key):
  A = key
  det = numpy.linalg.det(A)
 # inverseKey = numpy.dot(numpy.dot(numpy.linalg.inv(A), det), ModInv[int(det)])
  inverseKey = ModInv[abs((round(det))%27)] * numpy.linalg.inv(A) * round(det)
  decodeKey = inverseKey%27
  #decodeKey = numpy.zeros(len(inverseKey), len(inverseKey))
  #for i in len(inverseKey):
    #for j in len(inverseKey[0]):
      #decodeKey[i][j]=int((inverseKey[i][j]) % 27)
  decodedMatrix = numpy.dot(EncryptedMatrix, decodeKey)
  decodedMatrixMod = decodedMatrix %27
  #decodedMatrixMod = numpy.zeros(len(decodedMatrix), len(decodedMatrix[0]))
  #for i in len(decodedMatrix):
    #for j in len(decodedMatrix):
      #decodedMatrixMod[i][j] = int(decodedMatrix[i][j] % 27)
  return decodedMatrixMod

def Menu():
  print("*****************************")
  print("Enter c to encode a message")
  print("Enter d to decode a Message")
  print("Enter e exit the program")
  print("*****************************")
  
"""
text = input("Enter the text to be coded(NO CAPS): ")

Num = textToNum(text)
print(Num)
MatrixTwo = splitByTwo(Num)
print(MatrixTwo)

encodingmatrix = askEncodingMatrix()
print(encodingmatrix)

EncryptedMatrix = numpy.dot(MatrixTwo, encodingmatrix)

print("this is the encrypted matrix")
print(EncryptedMatrix)

print(numToText(EncryptedMatrix))
#decode
print("this is the decoded Matrix")
print(decodeMatrix(EncryptedMatrix, encodingmatrix))
decodedMessage = numToText(decodeMatrix(EncryptedMatrix, encodingmatrix))
print(decodedMessage)
"""
print("Hello! Welcome to HillCipher!")
option = ""
while(option != "e"):
  Menu()
  option = input("Choose a option to proceed: ")
  if(option == "c"):
    text = input("Enter the text to be coded(NO CAPS): ")
    Num = textToNum(text)
    print(Num)
    MatrixTwo = splitByTwo(Num)
    print(MatrixTwo)
    encodingmatrix = askEncodingMatrix()
    print(encodingmatrix)
    EncryptedMatrix = numpy.dot(MatrixTwo, encodingmatrix)
    print("this is the encrypted matrix")
    print(EncryptedMatrix)
    print(numToText(EncryptedMatrix))
  if(option == "d"):
    text = input("Enter the text to be decoded(NO CAPS): ")
    Num = textToNum(text)
    MatrixTwo = splitByTwo(Num)
    print(MatrixTwo)
    print("what was the original key used to encode the matrix?")
    encodingmatrix = askEncodingMatrix()
    print("this is the decoded Matrix")
    print(decodeMatrix(EncryptedMatrix, encodingmatrix))
    decodedMessage = numToText(decodeMatrix(EncryptedMatrix, encodingmatrix))
    print(decodedMessage)
print("You have exited the program")

  
